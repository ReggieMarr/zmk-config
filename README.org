#+title: Readme

* Summary
This is my zmk config for my kyria rev3 keyboard, there are many like it but this one is mine

* Quirks

When assembling the keyboard it was found that pin 10 on the left side uc is dead.
Because of this the pin was rerouted to pin 1.7.
As a resulted of this re-routing the config must account for it.
This is done in kyria_rev3_left.keymap.
Since we included a kyria_rev3_left.keymap zmk's build system assumes a kyria_rev3_right.keymap as well.

* Keybinds

** Combos
#+NAME: combo
#+BEGIN_SRC C :noweb no-export :tangle yes
combos {
    compatible = "zmk,combos";
    combo_esc {
        timeout-ms = <50>;
        key-positions = <1 2>;
        bindings = <&kp ESC>;
    };
};
#+END_SRC

** Behaviors
- `clear_tog`: This toggles between clearing the Bluetooth pairing `&bt BT_CLR` with a single tap and enabling the function layer `&tog FUNC` when the shift key is held down.

- `just_bkspc`: This toggles between executing a backspace `&mt RIGHT_CONTROL BACKSPACE` when held with right control and a regular backspace `&kp BACKSPACE` when tapped and shift is held down.

- `grave_tog`: This toggles between entering a grave accent `&kp GRAVE` with a single tap and enabling the function layer `&tog FUNC` when the shift key is held down.

- `sl_tog`: This toggles between enabling a sticky function layer `&sl FUNC` with a single tap and enabling the function layer `&tog FUNC` when the shift key is held down.

- `hspc`: This toggles between executing a backspace `&mt RIGHT_CONTROL BACKSPACE` when held with right control and a regular backspace `&kp BACKSPACE` when tapped and shift is held down.

- `down_p_down`: The key sends a 'DOWN' character `&kp UP` when tapped and sends a keystroke for page down `&kp PAGE_DOWN` when held with control.

- `up_p_up`: The key sends a 'UP' character `&kp UP ` when tapped and a keystroke for page up `&kp PAGE_UP` when held and control is engaged.

- `ctrl_gui`: This is a tap-dance operation where the key sends a left control `&kp LEFT_CONTROL` on a single tap and left GUI (likely refer to Win/Command key) `&kp LGUI` on double-tap.

#+NAME: behaviors
#+BEGIN_SRC C :noweb no-export :tangle yes
behaviors {
        clear_tog: clear_toggle {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&bt BT_CLR>, <&tog FUNC>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        just_bkspc: just_bkspc {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&mt RIGHT_CONTROL BACKSPACE>, <&kp BACKSPACE>;
        mods = <(MOD_LSFT)>;
        };
        grave_tog: grave_toggle {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp GRAVE>, <&tog FUNC>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        sl_tog: sticky_layer_toggle {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&sl FUNC>, <&tog FUNC>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        hspc: holdable_backspace {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&mt RIGHT_CONTROL BACKSPACE>, <&kp BACKSPACE>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        down_p_down: down_and_page_down {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp DOWN>, <&kp PAGE_DOWN>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        up_p_up: up_and_page_up {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&kp UP>, <&kp PAGE_UP>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ctrl_gui: left_ctrl_gui {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp LEFT_CONTROL>, <&kp LGUI>;
        };
};
#+END_SRC

** Keymap
#+NAME: bindings
#+BEGIN_SRC C :noweb no-export :tangle yes
keymap {
        compatible = "zmk,keymap";

        default_layer {
        // ---------------------------------------------------------------------------------------------------------------------------------
        // | GRAVE |  Q  |  W  |  E   |  R   |  T   |                                    |  Y   |  U    |  I    |  O   |  P   |   \   |
        // | FUNC+TAB |  A  |  S  |  D   |  F   |  G   |                                 |  H   |  J    |  K    |  L   |   ;   |   '   |
        // | MINUS |  Z  |  X  |  C   |  V   |  B   | TRANS | L_SHIFT | TRANS | LAYER 1     |  N   |  M    |  ,    |  .   |   /   | EQUAL |
        //               | MUTE | CTRL/GUI | L_SHIFT+[ |SPACE | L_ALT+ESC | TD_LAYER |   DEL   |   ]   | FUNC+BSPC  | HOME |

        bindings = <
        &kp GRAVE  &kp Q  &kp W  &kp E &kp R &kp T                                                                  &kp Y  &kp U     &kp I  &kp O    &kp P     &kp BSLH
        &lt FUNC TAB    &kp A  &kp S  &kp D &kp F &kp G                                                              &kp H &kp J &kp K &kp L &kp SEMI  &lt FUNC SQT
        &kp MINUS  &kp Z  &kp X  &kp C &kp V &kp B  &trans   &kp LEFT_SHIFT  &trans &sl_tog &kp N     &kp M     &kp COMMA  &kp DOT  &kp FSLH  &kp EQUAL
                &kp C_MUTE  &ctrl_gui &mt LEFT_SHIFT LEFT_BRACKET &kp SPACE &mt LEFT_ALT ESC    &kp RET  &just_bkspc  &mt RIGHT_SHIFT RIGHT_BRACKET  &lt FUNC BSPC  &kp HOME
        >;
        sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp UP DOWN>;
        };

// ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// | GRAVE |  1  |  2  |  3   |  4  |  5  |                                          | MEDIA REWIND | MEDIA PLAY_PAUSE | MEDIA FAST-FORWARD |  -    |  -    | -   |
// |  TAB  |  6  |  7  |  8   |  9  |  0  |                                          | LEFT ARROW  | MOUSE SCROLL DOWN | MOUSE SCROLL UP | RIGHT ARROW  |  -   |  -   |
// | - | BT CLEAR | BT PREV | BT NEXT | BT SEL | 0|                                                     |  TOGGLE  |  BRIGHTNESS DOWN  | BRIGHTNESS UP   |  BRIGHTNESS AUTO | -  |  -  |
//                     | MUTE | GUI  | L_SHIFT+[ |  SPACE | ALT + ESC |  |  DELETE  | BSPC  | R_SHIFT  | R-ALT |
        func_layer {
        bindings = <
                &kp GRAVE  &kp NUM_1 &kp NUM_2   &kp NUM_3    &kp NUM_4 &kp NUM_5                                &kp C_RW    &kp C_PP     &kp C_FF   &trans  &trans  &trans
                &kp TAB &kp NUM_6  &kp NUM_7  &kp NUM_8  &kp NUM_9 &kp NUM_0                      &kp LEFT    &down_p_down &up_p_up &kp RIGHT   &trans  &trans
        &trans  &bt BT_CLR  &bt BT_PRV &bt BT_NXT   &bt BT_SEL 0 &kp NUMBER_0 &trans &trans       &trans  &tog FUNC  &kp C_BRI_DN  &kp C_BRI_UP  &kp C_BRI_AUTO  &trans  &trans  &trans
                &kp C_MUTE  &ctrl_gui &mt LEFT_SHIFT LEFT_BRACKET &kp SPACE &mt LEFT_ALT ESC    &kp RET  &just_bkspc  &mt RIGHT_SHIFT RIGHT_BRACKET  &lt FUNC BSPC  &kp HOME
        >;

        sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp UP DOWN>;
        };
        symbol_layer {
        bindings = <
                &bt BT_CLR  &bt BT_PRV &kp W   &bt BT_NXT    &bt BT_SEL 0 &bt BT_DISC 0                &kp C_RW    &kp C_PP     &kp C_FF   &trans  &trans  &trans
                &kp TAB &kp EXCLAMATION  &kp AT_SIGN  &kp HASH &kp DOLLAR &kp PERCENT                      &kp LEFT    &kp DOWN     &kp UP      &kp RIGHT   &trans  &trans
                &trans  &kp CARET &kp AMPERSAND &kp STAR &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &trans &trans       &trans  &tog SYM  &kp C_BRI_DN  &kp C_BRI_UP  &kp C_BRI_AUTO  &trans  &trans  &trans
                        &kp C_MUTE        &trans       &kp LEFT_SHIFT &kp SPACE  &lt LEFT_ALT ESC                   &kp RET  &lt RIGHT_CONTROL BSPC  &trans  &trans  &kp HOME
        >;

        sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp UP DOWN>;
        };

};
#+END_SRC

#+RESULTS: bindings

#+BEGIN_SRC C :noweb tangle :tangle ./config/kyrev3_common.keymap :main no
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>


#define DEFAULT 0
#define FUNC  1
#define SYM  2

/ {
    <<combo>>
    <<behaviors>>
    <<bindings>>
};
#+END_SRC


* Building and loading
Building both the left and right sides can be down like so:
(assuming the zmk repo is above)

#+begin_src sh :tangle build_sides.sh
docker run -it --rm -w /zmk -v "$(pwd)/../":/zmk:Z zmkfirmware/zmk-dev-arm:stable bash -c "west build -p -s /zmk/app -d build/right -b nice_nano_v2 -- -DSHIELD=kyria_rev3_right && west build -p -s /zmk/app -d build/left -b nice_nano_v2 -- -DSHIELD=kyria_rev3_left"
#+end_src

The reset fw build can be built as such:
#+begin_src sh :tangle build_reset.sh
docker run -it --rm -w /zmk -v "$(pwd)/../":/zmk:Z zmkfirmware/zmk-dev-arm:stable bash -c "west build -p -s /zmk/app -d build/reset -b nice_nano_v2 -- -DSHIELD=settings_reset"
#+end_src

The fw builds can be loaded on the the board if it is connected via usb and put into the bootloader by hitting reset twice.
Once this is done the fw can be loaded by copying the files over like so:
#+begin_src sh
cp ../build/left/zephyr/zmk.uft /media/${USER}/NICENANO
#+end_src

* Issues:

** Left encoder doesn't produce desired behavior despite emitting data
Despite configuring both sides to emit page up and down only actuation on the right side results in the desired behaviour.
The following is the serial output when articulating for the left and right side
*** Left side
#+begin_src shell
[00:09:01.567,382] <dbg> zmk: zmk_keymap_sensor_event: layer: 2 sensor_index: 0, binding name: enc_key_press
[00:09:01.567,443] <dbg> zmk: zmk_behavior_sensor_rotate_common_accept_data: val1: -4, val2: -500000, remainder: -4/-500000 triggers: 0 inc keycode 0x70052 dec keycode 0x70051
[00:09:01.567,535] <dbg> zmk: zmk_keymap_sensor_event: layer: 1 sensor_index: 0, binding name: enc_key_press
[00:09:01.567,565] <dbg> zmk: zmk_behavior_sensor_rotate_common_accept_data: val1: -4, val2: -500000, remainder: -4/-500000 triggers: 0 inc keycode 0x70052 dec keycode 0x70051
[00:09:01.567,626] <dbg> zmk: zmk_keymap_sensor_event: layer: 0 sensor_index: 0, binding name: enc_key_press
[00:09:01.567,687] <dbg> zmk: zmk_behavior_sensor_rotate_common_accept_data: val1: -4, val2: -500000, remainder: -4/-500000 triggers: 0 inc keycode 0x70052 dec keycode 0x70051
#+end_src

*** Right side
#+begin_src shell
[00:08:42.079,650] <dbg> zmk: split_central_sensor_notify_func: [SENSOR NOTIFICATION] data 0x2000f7db length 12
[00:08:42.079,742] <dbg> zmk: peripheral_sensor_event_work_callback: Trigger sensor change for 1
[00:08:42.079,833] <dbg> zmk: zmk_keymap_sensor_event: layer: 2 sensor_index: 1, binding name: enc_key_press
[00:08:42.079,895] <dbg> zmk: zmk_behavior_sensor_rotate_common_accept_data: val1: 4, val2: 500000, remainder: 0/0 triggers: 1 inc keycode 0x70052 dec keycode 0x70051
[00:08:42.079,986] <dbg> zmk: zmk_keymap_sensor_event: layer: 1 sensor_index: 1, binding name: enc_key_press
[00:08:42.080,017] <dbg> zmk: zmk_behavior_sensor_rotate_common_accept_data: val1: 4, val2: 500000, remainder: 0/0 triggers: 1 inc keycode 0x70052 dec keycode 0x70051
[00:08:42.080,078] <dbg> zmk: zmk_keymap_sensor_event: layer: 0 sensor_index: 1, binding name: enc_key_press
[00:08:42.080,139] <dbg> zmk: zmk_behavior_sensor_rotate_common_accept_data: val1: 4, val2: 500000, remainder: 0/0 triggers: 1 inc keycode 0x70052 dec keycode 0x70051
[00:08:42.080,169] <dbg> zmk: zmk_behavior_sensor_rotate_common_process: Sensor binding: enc_key_press
[00:08:42.080,230] <dbg> zmk: behavior_queue_process_next: Invoking key_press: 0x70052 0x00
[00:08:42.080,261] <dbg> zmk: on_keymap_binding_pressed: position 0 keycode 0x70052
[00:08:42.080,291] <dbg> zmk: hid_listener_keycode_pressed: usage_page 0x07 keycode 0x52 implicit_mods 0x00 explicit_mods 0x00
[00:08:42.080,291] <dbg> zmk: zmk_hid_implicit_modifiers_press: Modifiers set to 0x00
[00:08:42.080,322] <dbg> zmk: zmk_endpoints_send_report: usage page 0x07
[00:08:42.080,383] <dbg> zmk: behavior_queue_process_next: Processing next queued behavior in 5ms
[00:08:42.080,444] <dbg> zmk: zmk_keymap_sensor_event: sensor event processing complete, behavior response was opaque
[00:08:42.081,207] <dbg> zmk: vddh_sample_fetch: ADC raw 2994 ~ 4385 mV => 100%
[00:08:42.085,479] <dbg> zmk: behavior_queue_process_next: Invoking key_press: 0x70052 0x00
[00:08:42.085,479] <dbg> zmk: on_keymap_binding_released: position 0 keycode 0x70052
[00:08:42.085,510] <dbg> zmk: hid_listener_keycode_released: usage_page 0x07 keycode 0x52 implicit_mods 0x00 explicit_mods 0x00
[00:08:42.085,540] <dbg> zmk: zmk_hid_implicit_modifiers_release: Modifiers set to 0x00
[00:08:42.085,540] <dbg> zmk: zmk_endpoints_send_report: usage page 0x07
[00:08:42.085,601] <dbg> zmk: behavior_queue_process_next: Processing next queued behavior in 0ms
[00:08:42.132,171] <dbg> zmk: split_central_sensor_notify_func: [SENSOR NOTIFICATION] data 0x2000f7db length 12
[00:08:42.132,232] <dbg> zmk: peripheral_sensor_event_work_callback: Trigger sensor change for 1
[00:08:42.132,293] <dbg> zmk: zmk_keymap_sensor_event: layer: 2 sensor_index: 1, binding name: enc_key_press
[00:08:42.132,354] <dbg> zmk: zmk_behavior_sensor_rotate_common_accept_data: val1: 4, val2: 500000, remainder: 4/500000 triggers: 0 inc keycode 0x70052 dec keycode 0x70051
[00:08:42.132,415] <dbg> zmk: zmk_keymap_sensor_event: layer: 1 sensor_index: 1, binding name: enc_key_press
[00:08:42.132,446] <dbg> zmk: zmk_behavior_sensor_rotate_common_accept_data: val1: 4, val2: 500000, remainder: 4/500000 triggers: 0 inc keycode 0x70052 dec keycode 0x70051
[00:08:42.132,537] <dbg> zmk: zmk_keymap_sensor_event: layer: 0 sensor_index: 1, binding name: enc_key_press
[00:08:42.132,568] <dbg> zmk: zmk_behavior_sensor_rotate_common_accept_data: val1: 4, val2: 500000, remainder: 4/500000 triggers: 0 inc keycode 0x70052 dec keycode 0x70051
#+end_src
